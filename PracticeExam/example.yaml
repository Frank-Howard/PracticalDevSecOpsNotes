image: docker:latest

services:
  - docker:dind

stages:
  - build
  - test
  - release
  - preprod
  - integration
  - prod

build:
  stage: build
  image: python:3.6
  before_script:
   - pip3 install --upgrade virtualenv
  script:
   - virtualenv env                       # Create a virtual environment for the python application
   - source env/bin/activate              # Activate the virtual environment
   - pip install -r requirements.txt      # Install the required third party packages as defined in requireme>
   - python manage.py check               # Run checks to ensure the application is working fine

test:
  stage: test
  image: python:3.6
  before_script:
   - pip3 install --upgrade virtualenv
  script:
   - virtualenv env
   - source env/bin/activate
   - pip install -r requirements.txt
   - python manage.py test taskManager

safety:
  stage: test
  script:
    - docker run -it --rm -v $PWD:/opt pyupio/safety safety check --file=/opt/requirements.txt --json -o /opt/safety_report.json
  artifacts:
    paths: 
      - safety_report.json
    when: always
  allow_failure: true
    
retirejs:
  stage: test
  script:
    - docker run --rm -v $PWD:/app gruebel/retirejs:latest --outputformat json --outputpath retirejs_report.json
  artifacts:
    paths:
      - retirejs_report.json
    when: always
  allow_failure: true
  
trufflehog:
    stage: test
    script:
      - docker run -v $(pwd):/src --rm hysnsec/trufflehog --repo_path /src file:///src --json | tee trufflehog_report.json
    artifacts:
      paths:
        - trufflehog_report.json
      when: always
    allow_failure: true

bandit:
  stage: test
  script:
    - docker run --rm $(pwd):/data cytopia/bandit -r /data -o bandit_output.json
  artifacts:
    paths:
      - bandit_output.json
    when: always
  allow_failure: true
  

    
