image: docker:latest

services:
  - docker:dind

stages:
  - build
  - test
  - release
  - preprod
  - integration
  - prod

build:
  stage: build
  image: python:3.6
  before_script:
   - pip3 install --upgrade virtualenv
  script:
   - virtualenv env                       # Create a virtual environment for the python application
   - source env/bin/activate              # Activate the virtual environment
   - pip install -r requirements.txt      # Install the required third party packages as defined in requireme>
   - python manage.py check               # Run checks to ensure the application is working fine

test:
  stage: test
  image: python:3.6
  before_script:
   - pip3 install --upgrade virtualenv
  script:
   - virtualenv env
   - source env/bin/activate
   - pip install -r requirements.txt
   - python manage.py test taskManager  
  
## SCA -------------------------------------------------------------------------------------------------------------------
safety:
  stage: test
  script:
    # We are going to pull the hysnsec/safety image to run the safety scanner
    - docker pull hysnsec/safety
    # third party components are stored in requirements.txt for python, so we will scan this particular file with safety.
    - docker run --rm -v $(pwd):/src hysnsec/safety check -r requirements.txt --json > oast-results.json
  artifacts:
    paths: [oast-results.json]
    when: always # What does this do?
  allow_failure: true
    
retirejs:
  stage: test
  image: node:alpine3.10
  script:
    - npm install
    - npm install -g retire
    - retire --outputformat json --outputpath retirejs-report.json --severity high
  artifacts:
    paths: [retirejs-report.json]
    when: always
    expire_in: one week # Optional

retirejs_docker:
  stage: test
  script:
    - docker pull gruebel/retirejs
    - docker run --rm -v $PWD:/app gruebel/retirejs:latest --outputformat json --outputpath /app/retirejs-report.json
  artifacts:
    paths: [retirejs-report.json]
    when: always
    expire_in: one week # Optional
    
dependency-check:
  stage: test
  image: gitlab/dind:latest
  script:
    - chmod +x ./run-depcheck.sh
    - ./run-depcheck.sh
  artifacts:
    paths:
      - reports/dependency-check-report.csv
    when: always
    expire_in: one week
    
# ADD SNYK_TOKEN to variables in gitlab. IDK if they give you one or they might ask you to get a free one from snyk website
snyk:
  stage: test
  image: node:latest
  before_script:
    - wget -O snyk https://github.com/snyk/snyk/releases/download/v1.566.0/snyk-linux
    - chmod +x snyk
    - mv snyk /usr/local/bin/
  script:
    - npm install
    - snyk test --json > snyk-results.json
  artifacts:
    paths:
    - snyk-results.json
    expire_in: one week
  allow_failure: true
  
# make sure this is running on webapp repo and not django. Otherwise no results
npm_audit:
  stage: test
  script:
    - npm audit --json | tee npm_results.json
  artifacts:
    paths: [npm_results.json]
    when: always
    expire_in: one week # Optional
    
auditjs:
  image: docker:dind
  stage: test
  script:
    - docker run --rm -v $(pwd):/src -w /src hysnsec/auditjs ossi -q -j | tee auditjs-output.json
  artifacts:
    paths: [auditjs-output.json]
    when: always # What is this for?
    expire_in: one week
  allow_failure: true

bundler-audit:
  stage: test
  script:
    - docker pull hysnsec/bunder-audit
    - docker run --rm -v $(pwd):/src -w /src hysnsec/bundler-audit ossi -q -j | tee bundler-audit-output.json
  artifacts:
    paths: [bundler-audit-output.json]
    when: always # What is this for?
    expire_in: one week
  allow_failure: true
  
# NOTE: Needs a Gemfile.lock file
chelsea:
  stage: test
  script:
    - docker pull ruby:2.6.6
    - docker run -v $PWD:/app -w /app ruby:2.6.6 /bin/bash -c "gem install chelsea && chelsea -f Gemfile.lock -t json | tail -n1 > chelsea-output.json"
  artifacts:
    paths: [chelsea-output.json]
    when: always # What is this for?
    expire_in: one week
  allow_failure: true 
  
# SAST -------------------------------------------------------------------------------------------------------------------  
trufflehog:
  stage: build
  script:
    - docker run -v $(pwd):/src --rm hysnsec/trufflehog --repo_path /src file:///src --json | tee trufflehog-output.json
  artifacts:
    paths: [trufflehog-output.json]
    when: always  # What is this for?
    expire_in: one week

sast:
  stage: build
  script:
    - docker pull hysnsec/bandit  # Download bandit docker container
    # Run docker container, please refer docker security course, if this doesn't make sense to you.
    - docker run --user $(id -u):$(id -g) -v $(pwd):/src --rm hysnsec/bandit -r /src -f json -o /src/bandit-output.json
  artifacts:
    paths: [bandit-output.json]
    when: always
  allow_failure: true   #<--- allow the build to fail but don't mark it as such
  

  
#DAST ------------------------------------------------------------------------------------------------------------------------------
nikto:
  stage: integration
  script:
    - docker pull hysnsec/nikto
    - docker run --rm -v $(pwd):/tmp hysnsec/nikto -h http://prod-xioqjd4c.lab.practical-devsecops.training -o /tmp/nikto-output.xml
  artifacts:
    paths: [nikto-output.xml]
    when: always
  allow_failure: true

sslscan:
  stage: integration
  script:
    - docker pull hysnsec/sslyze
    - docker run --rm -v $(pwd):/tmp hysnsec/sslyze prod-xioqjd4c.lab.practical-devsecops.training:443 --json_out /tmp/sslyze-output.json
  artifacts:
    paths: [sslyze-output.json]
    when: always
  allow_failure: true

nmap:
  stage: integration
  script:
    - docker pull hysnsec/nmap
    - docker run --rm -v $(pwd):/tmp hysnsec/nmap prod-xioqjd4c -oX /tmp/nmap-output.xml
  artifacts:
    paths: [nmap-output.xml]
    when: always
  allow_failure: true

zap-baseline:
  stage: integration
  before_script:
    - docker pull owasp/zap2docker-stable:2.10.0
  script:
    - docker run --user $(id -u):$(id -g) -w /zap -v $(pwd):/zap/wrk:rw --rm owasp/zap2docker-stable:2.10.0 zap-baseline.py -t https://prod-xioqjd4c.lab.practical-devsecops.training -J zap-output.json
  after_script:
    - docker rmi owasp/zap2docker-stable:2.10.0  # clean up the image to save the disk space
  artifacts:
    paths: [zap-output.json]
    when: always        # What does this do?
  allow_failure: false  # Optional

